version: '3.8'
services:
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - db-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      timeout: 30s
      retries: 5
      start_period: 30s
  api_test:
    depends_on:
      postgres:
        condition: service_healthy
    build:
      dockerfile: Dockerfile
      context: .
      target: testing
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - shared_modules:/usr/src/app/node_modules
    command: npm run test:ci
  api_development:
    depends_on:
      postgres:
        condition: service_healthy
    build:
      dockerfile: Dockerfile
      context: .
      target: development
    env_file:
      - .env
    ports:
      - 3000:3333
    volumes:
      - .:/usr/src/app
      - shared_modules:/usr/src/app/node_modules
    command: yarn start
  api:
    depends_on:
      postgres:
        condition: service_healthy
    build:
      dockerfile: Dockerfile.prod
      context: .
    volumes:
      - /usr/src/app/node_modules
    env_file:
      - .env
    ports:
      - 3000:3333
    command: yarn start:production
volumes:
  db-postgres:
  shared_modules: